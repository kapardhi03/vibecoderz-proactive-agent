"""
Interactive Demo Script for ProactiveAgent
Run with: python src/demo.py
"""
import asyncio
import json
import os
from datetime import datetime
from dotenv import load_dotenv
from proactive_agent import (
    ProactiveAgent, 
    StudentEvent,
    simulate_failed_quiz_event,
    simulate_help_request_event,
    simulate_session_timeout_event
)

load_dotenv()

class DemoRunner:
    """Interactive demo runner for ProactiveAgent"""
    
    def __init__(self):
        api_key = os.getenv("GEMINI_API_KEY")
        if not api_key:
            raise ValueError("GEMINI_API_KEY not found in environment variables")
        self.agent = ProactiveAgent(api_key)
    
    def print_banner(self, title: str):
        """Print a formatted banner"""
        print("\n" + "="*60)
        print(f"🎯 {title}")
        print("="*60)
    
    def print_step(self, step: str, description: str):
        """Print a demo step"""
        print(f"\n📋 {step}: {description}")
        print("-" * 40)
    
    async def demo_scenario_1(self):
        """Demo Scenario 1: Student fails CSS quiz"""
        self.print_banner("SCENARIO 1: Quiz Failure Detection & Intervention")
        
        self.print_step("Step 1", "Student 'Priya' fails CSS Flexbox quiz (Score: 40%)")
        
        # Create the event
        event = simulate_failed_quiz_event("priya", "CSS Flexbox")
        print(f"📊 Event Details:")
        print(f"   User: {event.user_id}")
        print(f"   Type: {event.event_type}")
        print(f"   Topic: {event.topic}")
        print(f"   Score: {event.metadata.get('quiz_score', 'N/A')}")
        
        self.print_step("Step 2", "ProactiveAgent processes the event")
        
        result = await self.agent.process_student_event(event)
        
        self.print_step("Step 3", "Agent Response")
        print(f"💬 User Message: {result.get('user_message')}")
        print(f"🔧 Action Taken: {result.get('action')}")
        
        if result.get('action') == 'intervention_created':
            self.print_step("Step 4", "Generated Byte Course Artifact")
            
            # Extract and display the artifact
            response_text = str(result.get('response', ''))
            try:
                if '{' in response_text and '}' in response_text:
                    start = response_text.find('{')
                    end = response_text.rfind('}') + 1
                    json_str = response_text[start:end]
                    artifact = json.loads(json_str)
                    
                    print(f"📚 Title: {artifact.get('title')}")
                    print(f"⏱️  Duration: {artifact.get('duration_minutes')} minutes")
                    print(f"📊 Difficulty: {artifact.get('difficulty_level')}")
                    print(f"📝 Number of slides: {len(artifact.get('slides', []))}")
                    
                    # Show slide titles
                    for i, slide in enumerate(artifact.get('slides', []), 1):
                        print(f"   Slide {i}: {slide.get('title')}")
                        
                else:
                    print("⚠️  Artifact format not recognized in response")
                    print(f"Raw response: {response_text[:200]}...")
                    
            except Exception as e:
                print(f"❌ Error parsing artifact: {e}")
        
        input("\nPress Enter to continue to next scenario...")
    
    async def demo_scenario_2(self):
        """Demo Scenario 2: Multiple help requests trigger intervention"""
        self.print_banner("SCENARIO 2: Multiple Help Requests Pattern")
        
        user_id = "alex"
        
        self.print_step("Step 1", f"Student '{user_id}' requests help with JavaScript Promises")
        
        event1 = simulate_help_request_event(user_id, "JavaScript Promises")
        result1 = await self.agent.process_student_event(event1)
        
        print(f"🔧 Action: {result1.get('action')}")
        print(f"💡 Why: Single help request - monitoring for patterns")
        
        self.print_step("Step 2", f"Same student requests help with related topic")
        
        event2 = StudentEvent(
            user_id=user_id,
            event_type="help_request",
            topic="JavaScript Async/Await",
            metadata={"help_type": "concept_confusion", "previous_topic": "JavaScript Promises"}
        )
        
        result2 = await self.agent.process_student_event(event2)
        
        print(f"🔧 Action: {result2.get('action')}")
        if result2.get('action') == 'intervention_created':
            print(f"💬 Message: {result2.get('user_message')}")
            print("✅ Pattern detected: Multiple related struggles → Intervention triggered")
        else:
            print("ℹ️  Still monitoring - intervention threshold not yet met")
        
        # Show user's struggle history
        user_memory = self.agent.user_memory.get(user_id, {})
        self.print_step("Step 3", "User Learning Profile")
        print(f"📊 Total events: {len(user_memory.get('struggle_history', []))}")
        print(f"🎯 Interventions: {user_memory.get('intervention_count', 0)}")
        
        struggle_topics = [event['topic'] for event in user_memory.get('struggle_history', [])]
        print(f"📚 Topics: {struggle_topics}")
        
        input("\nPress Enter to continue to next scenario...")
    
    async def demo_scenario_3(self):
        """Demo Scenario 3: Custom event creation"""
        self.print_banner("SCENARIO 3: Custom Event Processing")
        
        self.print_step("Step 1", "Create custom learning event")
        
        # Let user create a custom event
        print("🎮 Let's create a custom student event!")
        user_id = input("Enter student name (default: maya): ").strip() or "maya"
        topic = input("Enter topic they're struggling with (default: React Hooks): ").strip() or "React Hooks"
        
        custom_event = StudentEvent(
            user_id=user_id,
            event_type="quiz_failure",
            topic=topic,
            metadata={
                "quiz_score": 0.35,
                "attempts": 3,
                "time_spent": 25,
                "custom_demo": True
            }
        )
        
        self.print_step("Step 2", "Process custom event")
        print(f"📊 Processing event for {user_id} struggling with {topic}")
        
        result = await self.agent.process_student_event(custom_event)
        
        self.print_step("Step 3", "Custom Response")
        print(f"💬 Message: {result.get('user_message')}")
        print(f"🔧 Action: {result.get('action')}")
        
        if result.get('action') == 'intervention_created':
            print(f"✅ Successfully created personalized intervention for {topic}!")
        
        input("\nPress Enter to see final summary...")
    
    def display_system_summary(self):
        """Display overall system performance summary"""
        self.print_banner("SYSTEM PERFORMANCE SUMMARY")
        
        print("📊 Agent Memory Status:")
        total_users = len(self.agent.user_memory)
        total_events = sum(len(memory.get('struggle_history', [])) for memory in self.agent.user_memory.values())
        total_interventions = sum(memory.get('intervention_count', 0) for memory in self.agent.user_memory.values())
        
        print(f"   👥 Users processed: {total_users}")
        print(f"   📋 Total events: {total_events}")
        print(f"   🎯 Interventions created: {total_interventions}")
        
        if total_events > 0:
            intervention_rate = (total_interventions / total_events) * 100
            print(f"   📈 Intervention rate: {intervention_rate:.1f}%")
        
        print("\n📚 User Details:")
        for user_id, memory in self.agent.user_memory.items():
            struggle_count = len(memory.get('struggle_history', []))
            intervention_count = memory.get('intervention_count', 0)
            topics = [event['topic'] for event in memory.get('struggle_history', [])]
            unique_topics = list(set(topics))
            
            print(f"   {user_id}:")
            print(f"     Struggles: {struggle_count} events")
            print(f"     Interventions: {intervention_count}")
            print(f"     Topics: {unique_topics}")
        
        print("\n✅ Demo completed successfully!")
        print("💡 The ProactiveAgent is ready for integration with Vibecoderz platform.")

async def main():
    """Main demo function"""
    print("🎬 ProactiveAgent Interactive Demo")
    print("🎯 Vibecoderz AI Assessment POC")
    print("=" * 60)
    
    try:
        demo = DemoRunner()
        
        print("👋 Welcome to the ProactiveAgent demo!")
        print("This demo will show how the agent detects student struggles")
        print("and creates personalized byte-sized learning interventions.")
        
        input("\nPress Enter to start the demo...")
        
        # Run demo scenarios
        await demo.demo_scenario_1()
        await demo.demo_scenario_2()
        await demo.demo_scenario_3()
        
        # Show summary
        demo.display_system_summary()
        
    except KeyboardInterrupt:
        print("\n\n👋 Demo interrupted by user. Goodbye!")
    except Exception as e:
        print(f"\n❌ Demo failed with error: {e}")
        print("💡 Please check your environment setup and try again.")

if __name__ == "__main__":
    asyncio.run(main())