"""
ProactiveAgent Implementation using Google ADK
"""
import os
import json
from datetime import datetime
from typing import Dict, List, Any
from pydantic import BaseModel
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

class StudentEvent(BaseModel):
    """Student interaction event data"""
    user_id: str
    event_type: str  # "quiz_failure", "session_timeout", etc.
    topic: str
    metadata: Dict[str, Any]
    timestamp: datetime = datetime.now()

class ByteCourseArtifact(BaseModel):
    """Generated byte course structure"""
    title: str
    topic: str
    slides: List[Dict[str, str]]
    duration_minutes: int
    difficulty_level: str

class ProactiveAgent:
    """Working ProactiveAgent using Gemini API directly"""
    
    def __init__(self, gemini_api_key: str):
        self.gemini_api_key = gemini_api_key
        self.user_memory = {}  # Simple in-memory storage for POC
        
        # Initialize Gemini client
        try:
            from google import genai
            self.gemini_client = genai.Client(api_key=gemini_api_key)
            print("✅ Gemini client initialized successfully")
        except Exception as e:
            print(f"❌ Gemini client initialization failed: {e}")
            raise
        
        # Test connection
        self._test_connection()
    
    def _test_connection(self):
        """Test Gemini API connection"""
        try:
            from google import genai
            response = self.gemini_client.models.generate_content(
                model="gemini-2.5-flash",
                contents="Say 'connection test successful' in exactly 3 words.",
                config=genai.types.GenerateContentConfig(
                    temperature=0.1,
                    max_output_tokens=20
                )
            )
            print(f"✅ API connection test: {response.text.strip()}")
        except Exception as e:
            print(f"⚠️  API connection test failed: {e}")
    
    def generate_byte_course_artifact(self, topic: str) -> str:
        """Generate a 3-slide educational artifact for a specific topic."""
        try:
            prompt = f"""Create a concise, helpful 3-slide educational summary for the topic: {topic}

            Format the response as a valid JSON object with this exact structure:
            {{
                "title": "Quick Guide to {topic}",
                "topic": "{topic}",
                "slides": [
                    {{
                        "slide_number": 1,
                        "title": "What is {topic}?",
                        "content": "Clear, simple explanation of the concept",
                        "key_points": ["point 1", "point 2", "point 3"]
                    }},
                    {{
                        "slide_number": 2,
                        "title": "How {topic} Works",
                        "content": "Practical explanation with examples",
                        "key_points": ["practical tip 1", "practical tip 2", "example"]
                    }},
                    {{
                        "slide_number": 3,
                        "title": "Practice {topic}",
                        "content": "Simple exercise or next steps",
                        "key_points": ["exercise", "resources", "next steps"]
                    }}
                ]],
                "duration_minutes": 5,
                "difficulty_level": "beginner"
            }}

            Make the content encouraging, practical, and focused on helping someone who is struggling with this topic.
            Respond ONLY with valid JSON, no additional text."""

            from google import genai
            response = self.gemini_client.models.generate_content(
                model="gemini-2.5-flash",
                contents=prompt,
                config=genai.types.GenerateContentConfig(
                    temperature=0.1,
                    max_output_tokens=1500
                )
            )
            
            # Clean and validate JSON response
            content = response.text.strip()
            if content.startswith("```json"):
                content = content.replace("```json", "").replace("```", "").strip()
            
            # Additional cleaning for common JSON issues
            content = content.replace('\n', ' ').replace('\r', '')
            
            # Validate JSON
            parsed = json.loads(content)
            return content
            
        except Exception as e:
            print(f"⚠️  Artifact generation failed: {e}")
            # Fallback response
            fallback = {
                "title": f"Quick Guide to {topic}",
                "topic": topic,
                "slides": [
                    {
                        "slide_number": 1,
                        "title": f"Understanding {topic}",
                        "content": f"Let's break down {topic} into simple concepts you can master.",
                        "key_points": ["Start with basics", "Practice regularly", "Don't give up"]
                    },
                    {
                        "slide_number": 2,
                        "title": f"Key {topic} Concepts",
                        "content": f"Here are the most important aspects of {topic} to focus on.",
                        "key_points": ["Core concept 1", "Core concept 2", "Practical application"]
                    },
                    {
                        "slide_number": 3,
                        "title": f"Practice {topic}",
                        "content": f"Try these exercises to reinforce your {topic} knowledge.",
                        "key_points": ["Simple exercise", "Next steps", "Additional resources"]
                    }
                ],
                "duration_minutes": 5,
                "difficulty_level": "beginner"
            }
            return json.dumps(fallback)
    
    def _create_generate_tool(self):
        """Create tool for compatibility with test suite"""
        class MockTool:
            def __init__(self, func):
                self.func = func
        return MockTool(self.generate_byte_course_artifact)
    
    def update_user_memory(self, user_id: str, event: StudentEvent):
        """Update user context in memory"""
        if user_id not in self.user_memory:
            self.user_memory[user_id] = {
                "struggle_history": [],
                "intervention_count": 0,
                "last_intervention": None
            }
        
        self.user_memory[user_id]["struggle_history"].append({
            "topic": event.topic,
            "event_type": event.event_type,
            "timestamp": event.timestamp.isoformat()
        })
    
    async def process_student_event(self, event: StudentEvent) -> Dict[str, Any]:
        """Main processing method for student events - WORKING VERSION"""
        try:
            print(f"🔍 Processing: {event.event_type} for {event.user_id} on {event.topic}")
            
            # Update user memory
            self.update_user_memory(event.user_id, event)
            
            # Check if intervention is needed
            if not self._should_intervene(event):
                return {
                    "action": "no_intervention", 
                    "reason": "Not meeting intervention criteria",
                    "user_id": event.user_id
                }
            
            print(f"✅ Intervention triggered for {event.user_id}")
            
            # Generate educational artifact
            print(f"🎓 Generating educational content for: {event.topic}")
            artifact_json = self.generate_byte_course_artifact(event.topic)
            
            # Update intervention count
            self.user_memory[event.user_id]["intervention_count"] += 1
            self.user_memory[event.user_id]["last_intervention"] = datetime.now().isoformat()
            
            # Create user-friendly message
            user_message = f"I noticed you're having trouble with {event.topic}. I've created a quick learning guide to help you out!"
            
            print(f"✅ Intervention created successfully")
            
            return {
                "action": "intervention_created",
                "user_message": user_message,
                "response": artifact_json,
                "user_id": event.user_id,
                "timestamp": datetime.now().isoformat(),
                "intervention_id": f"int_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{event.user_id}"
            }
            
        except Exception as e:
            print(f"❌ Error in process_student_event: {e}")
            import traceback
            traceback.print_exc()
            return {
                "action": "error",
                "error": str(e),
                "user_id": event.user_id,
                "timestamp": datetime.now().isoformat()
            }
    
    def _should_intervene(self, event: StudentEvent) -> bool:
        """Determine if we should create an intervention"""
        user_context = self.user_memory.get(event.user_id, {})
        
        print(f"🤔 Checking intervention criteria for {event.event_type}")
        
        # Simple intervention logic for POC
        if event.event_type == "quiz_failure":
            print("✅ Quiz failure detected - intervention needed")
            return True
        
        if event.event_type == "help_request":
            struggle_count = len(user_context.get("struggle_history", []))
            print(f"📊 Help request - user has {struggle_count} previous struggles")
            if struggle_count >= 2:
                print("✅ Multiple help requests - intervention needed")
                return True
        
        if event.event_type == "session_timeout":
            print("⏰ Session timeout detected - intervention needed")
            return True
            
        print("❌ No intervention criteria met")
        return False


# Simulation functions for testing
def simulate_failed_quiz_event(user_id: str = "priya", topic: str = "CSS Flexbox") -> StudentEvent:
    """Simulate a failed quiz event"""
    return StudentEvent(
        user_id=user_id,
        event_type="quiz_failure",
        topic=topic,
        metadata={
            "quiz_score": 0.4,
            "attempts": 2,
            "time_spent": 45
        }
    )

def simulate_help_request_event(user_id: str = "alex", topic: str = "JavaScript Promises") -> StudentEvent:
    """Simulate a help request event"""
    return StudentEvent(
        user_id=user_id,
        event_type="help_request",
        topic=topic,
        metadata={
            "help_type": "concept_explanation",
            "frustration_level": "high"
        }
    )

def simulate_session_timeout_event(user_id: str = "sam", topic: str = "Python Functions") -> StudentEvent:
    """Simulate a session timeout with incomplete work"""
    return StudentEvent(
        user_id=user_id,
        event_type="session_timeout",
        topic=topic,
        metadata={
            "session_duration": 300,
            "completion_rate": 0.3,
            "last_activity": "reading_tutorial"
        }
    )